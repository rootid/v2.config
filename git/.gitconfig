[diff]
  tool = vimdiff
[core]
  compression = 0
  editor = vim
[merge]
  tool = vimdiff
[core]
  excludesfile = ~/.gitignore
  hooksPath = ~/git.hooks

[init]

[alias]

  #update config
  cfgu = config user.name
  cfge = config user.email

  #List the changed files
  stat = status
  cln = clone

  ##Remote operation
  ra = remote add
  rv = remote -v
  rc = remote rename

  bd = branch -D

  ##Git repo
  f = fetch
  co = checkout
  cob = checkout -b
  #Get all changes
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive

  #Local branch operations
  #custom mesage
  cm = !git add -A && git commit -m

  save = !git add -A && git commit -m "SAVEPOINT"
  wip = !git add -u && git commit -m "WIP"
  undo = reset HEAD~1 --mixed

  st = status -s
  who = shortlog -s --

  #Diffing
  dc = diff --cached
  df = diff
  diff = diff --word-diff

  #Raise PR
  bclean = "!f() { git branch --merged ${1-develop} | grep -v " ${1-develop}$" | xargs git branch -d; }; f"
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

  #lg = log -p
  lg = log --oneline --decorate
  cf = "!git status --porcelain | awk '{print $2}'"
  g = log --graph --topo-order --decorate --oneline --all

  #Fetch all submodules
  mu = "git pull && git submodule init && git submodule update"
  ga = add
  am = commit --amend
  #Resolve conflict
  gte = checkout --theirs
  gto = checkout --ours
  cp = cherry-pick

  del = "git status | grep 'deleted' | cut -d ':' -f2 | xargs git rm"
  #ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  ls = ls-files --other --modified --exclude-standard
  #Git commited files with username
  lf = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  #Git log with dates eg git lds -4
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  #List all aliases
  la = "!git config -l | grep alias | cut -c 7-"
  dl = "!git ll -1"
  fl = log -u
  #rebase git interactively
  rb =  rebase -i
  #Reset branches
  r = reset
  r1 = reset HEAD^


  #Merge diff
  os = "!f() { git co --ours $@ && git add $@; }; f"
  ts = "!f() { git co --theirs $@ && git add $@; }; f"

[gitflow "prefix"]
  feature = feature-
  #release = release-
  hotfix = hotfix-
  support = support-
  versiontag = v

# vim: ai ts=2 sw=2 et sts=2
[hub]
	protocol = https
